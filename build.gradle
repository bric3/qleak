plugins {
    id 'org.jetbrains.kotlin.jvm'
    id 'org.jetbrains.kotlin.kapt'
    id 'org.jetbrains.kotlin.plugin.allopen'
    id 'io.quarkus'

    id 'com.github.ben-manes.versions'
    id 'org.asciidoctor.jvm.convert'
}

repositories {
     mavenLocal()
     mavenCentral()
}

dependencies {
    implementation 'io.quarkus:quarkus-kotlin'
    implementation 'io.quarkus:quarkus-picocli'
    implementation enforcedPlatform("${quarkusPlatformGroupId}:${quarkusPlatformArtifactId}:${quarkusPlatformVersion}")
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
//    implementation("org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}")

    implementation("org.fusesource.jansi:jansi:${jansiVersion}")
    implementation("com.jakewharton.picnic:picnic:${picnicVersion}")

    implementation("com.squareup.leakcanary:shark:${sharkVersion}")
    implementation("com.squareup.leakcanary:shark-hprof:${sharkVersion}")
    implementation("com.squareup.leakcanary:shark-graph:${sharkVersion}")
    implementation("com.squareup.leakcanary:shark-log:${sharkVersion}")

    annotationProcessor enforcedPlatform("${quarkusPlatformGroupId}:${quarkusPlatformArtifactId}:${quarkusPlatformVersion}")
    annotationProcessor 'info.picocli:picocli-codegen'

    testImplementation 'io.quarkus:quarkus-junit5'
    testImplementation("org.assertj:assertj-core:${assertjVersion}")
}

group 'qleak'
version '0.1'

quarkus {
    setOutputDirectory("$projectDir/build/classes/kotlin/main")
}

quarkusDev {
    setSourceDir("$projectDir/src/main/kotlin")
}

allOpen {
    annotation("javax.enterprise.context.ApplicationScoped")
    annotation("io.quarkus.test.junit.QuarkusTest")
}

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

compileKotlin {
    kotlinOptions.jvmTarget = JavaVersion.VERSION_11
    kotlinOptions.javaParameters = true
}

compileTestKotlin {
    kotlinOptions.jvmTarget = JavaVersion.VERSION_11
}


test {
    systemProperty "java.util.logging.manager", "org.jboss.logmanager.LogManager"
}


asciidoctor {
    sourceDir file('docs')
//    sources {
//        include 'toplevel.adoc', 'another.adoc', 'third.adoc'
//    }
    outputDir file('build/docs')

    asciidoctorj {
        options doctype: 'article'

        attributes toc: 'right'
    }
}

dependencyUpdates {
    revision = "release"
    def isNonStable = { String version ->
        def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { qualifier -> version.toUpperCase().contains(qualifier) }
        def regex = /^[0-9,.v-]+$/
        return !stableKeyword && !(version ==~ regex)
    }

    rejectVersionIf { selection ->
        return (isNonStable(selection.candidate.version) && !isNonStable(selection.currentVersion))
    }

    checkForGradleUpdate = true
    gradleReleaseChannel = "current"
}


