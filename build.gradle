plugins {
    id "io.spring.dependency-management"
    id "org.jetbrains.kotlin.jvm"
    id "org.jetbrains.kotlin.kapt"
    id "org.jetbrains.kotlin.plugin.allopen"
    id "com.github.johnrengelman.shadow"
    id "application"
    id "com.github.ben-manes.versions"
    id 'org.asciidoctor.jvm.convert'
}


version "0.1"
group "qleak"

repositories {
    mavenCentral()
    maven { url "https://jcenter.bintray.com" }
}

dependencyManagement {
    imports {
        // https://search.maven.org/artifact/io.micronaut/micronaut-bom/1.2.0/pom
        mavenBom("io.micronaut:micronaut-bom:${micronautVersion}") {
            bomProperties([
                    'junit5.version': junitVersion,
                    'picocli.version': picocliVersion,
                    'jackson.version': jacksonVersion,
                    'jackson.modules.version': jacksonVersion,
                    'jackson.datatype.version': jacksonVersion
            ])
        }
    }
}

configurations {
    // for dependencies that are needed for development only
    developmentOnly
}

dependencies {
    implementation "io.micronaut:micronaut-runtime"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}"
    implementation "org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}"
    implementation "info.picocli:picocli"
    implementation "io.micronaut.configuration:micronaut-picocli"
    implementation "org.fusesource.jansi:jansi:1.18"

    implementation "com.squareup.leakcanary:shark:${sharkVersion}"
    implementation "com.squareup.leakcanary:shark-hprof:${sharkVersion}"
    implementation "com.squareup.leakcanary:shark-graph:${sharkVersion}"
    implementation "com.squareup.leakcanary:shark-log:${sharkVersion}"

    kapt "io.micronaut:micronaut-inject-java"
    kapt "io.micronaut:micronaut-validation"
    kaptTest "io.micronaut:micronaut-inject-java"

    runtimeOnly "com.fasterxml.jackson.module:jackson-module-kotlin"
    runtimeOnly "ch.qos.logback:logback-classic:1.2.3"

    testAnnotationProcessor "io.micronaut:micronaut-inject-java"
    testImplementation "org.assertj:assertj-core:${assertjVersion}"
    testImplementation "org.junit.jupiter:junit-jupiter-api"
    testImplementation "io.micronaut.test:micronaut-test-junit5"
    testImplementation "io.micronaut:micronaut-inject-java"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine"
}

test.classpath += configurations.developmentOnly
mainClassName = "qleak.QLeakCommand"

jar {
    manifest {
        attributes(
                'Main-Class': mainClassName,
                'Implementation-Title': rootProject.name,
                'Implementation-Version': rootProject.version
        )
    }
}

test {
    useJUnitPlatform()
}

allOpen {
    annotation("io.micronaut.aop.Around")
}

compileKotlin {
    kotlinOptions {
        jvmTarget = '1.8'
        //Will retain parameter names for Java reflection
        javaParameters = true
    }
}

compileTestKotlin {
    kotlinOptions {
        jvmTarget = '1.8'
        javaParameters = true
    }
}

shadowJar {
    mergeServiceFiles()
//    archiveClassifier = 'shadow'
    archiveClassifier = ''
    archiveBaseName = rootProject.name
}

run.classpath += configurations.developmentOnly
run.jvmArgs('-noverify', '-XX:TieredStopAtLevel=1', '-Dcom.sun.management.jmxremote')

distTar.enabled = false
distZip.enabled = false
shadowDistTar.enabled = false
shadowDistZip.enabled = false

asciidoctor {
    sourceDir  file('docs')
//    sources {
//        include 'toplevel.adoc', 'another.adoc', 'third.adoc'
//    }
    outputDir  file('build/docs')

    asciidoctorj {
        options  doctype: 'article'

        attributes toc : 'right'
    }
}

dependencyUpdates {
    revision = "release"
    def isNonStable = { String version ->
        def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { qualifier -> version.toUpperCase().contains(qualifier) }
        def regex = /^[0-9,.v-]+$/
        return !stableKeyword && !(version ==~ regex)
    }

    rejectVersionIf { selection ->
        return (isNonStable(selection.candidate.version) && !isNonStable(selection.currentVersion))
    }

    checkForGradleUpdate = true
    gradleReleaseChannel = "current"
}
